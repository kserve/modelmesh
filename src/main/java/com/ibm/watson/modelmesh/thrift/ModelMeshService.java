/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ibm.watson.modelmesh.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.2)")
public class ModelMeshService {

  public interface Iface extends BaseModelMeshService.Iface {

    /**
     * Used for internal forwarding of inferencing request/response between instances
     * 
     * @param modelId
     * @param input
     * @param metadata
     */
    public java.util.List<java.nio.ByteBuffer> applyModelMulti(java.lang.String modelId, java.util.List<java.nio.ByteBuffer> input, java.util.Map<java.lang.String,java.lang.String> metadata) throws ApplierException, ModelNotHereException, ModelNotFoundException, ModelLoadException, InternalException, org.apache.thrift.TException;

    public java.nio.ByteBuffer applyModel(java.lang.String modelId, java.nio.ByteBuffer input, java.util.Map<java.lang.String,java.lang.String> metadata) throws ApplierException, ModelNotHereException, ModelNotFoundException, ModelLoadException, InternalException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends BaseModelMeshService .AsyncIface {

    public void applyModelMulti(java.lang.String modelId, java.util.List<java.nio.ByteBuffer> input, java.util.Map<java.lang.String,java.lang.String> metadata, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.nio.ByteBuffer>> resultHandler) throws org.apache.thrift.TException;

    public void applyModel(java.lang.String modelId, java.nio.ByteBuffer input, java.util.Map<java.lang.String,java.lang.String> metadata, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends BaseModelMeshService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.List<java.nio.ByteBuffer> applyModelMulti(java.lang.String modelId, java.util.List<java.nio.ByteBuffer> input, java.util.Map<java.lang.String,java.lang.String> metadata) throws ApplierException, ModelNotHereException, ModelNotFoundException, ModelLoadException, InternalException, org.apache.thrift.TException
    {
      send_applyModelMulti(modelId, input, metadata);
      return recv_applyModelMulti();
    }

    public void send_applyModelMulti(java.lang.String modelId, java.util.List<java.nio.ByteBuffer> input, java.util.Map<java.lang.String,java.lang.String> metadata) throws org.apache.thrift.TException
    {
      applyModelMulti_args args = new applyModelMulti_args();
      args.setModelId(modelId);
      args.setInput(input);
      args.setMetadata(metadata);
      sendBase("applyModelMulti", args);
    }

    public java.util.List<java.nio.ByteBuffer> recv_applyModelMulti() throws ApplierException, ModelNotHereException, ModelNotFoundException, ModelLoadException, InternalException, org.apache.thrift.TException
    {
      applyModelMulti_result result = new applyModelMulti_result();
      receiveBase(result, "applyModelMulti");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applierException != null) {
        throw result.applierException;
      }
      if (result.notHere != null) {
        throw result.notHere;
      }
      if (result.mnfException != null) {
        throw result.mnfException;
      }
      if (result.mlException != null) {
        throw result.mlException;
      }
      if (result.iException != null) {
        throw result.iException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "applyModelMulti failed: unknown result");
    }

    public java.nio.ByteBuffer applyModel(java.lang.String modelId, java.nio.ByteBuffer input, java.util.Map<java.lang.String,java.lang.String> metadata) throws ApplierException, ModelNotHereException, ModelNotFoundException, ModelLoadException, InternalException, org.apache.thrift.TException
    {
      send_applyModel(modelId, input, metadata);
      return recv_applyModel();
    }

    public void send_applyModel(java.lang.String modelId, java.nio.ByteBuffer input, java.util.Map<java.lang.String,java.lang.String> metadata) throws org.apache.thrift.TException
    {
      applyModel_args args = new applyModel_args();
      args.setModelId(modelId);
      args.setInput(input);
      args.setMetadata(metadata);
      sendBase("applyModel", args);
    }

    public java.nio.ByteBuffer recv_applyModel() throws ApplierException, ModelNotHereException, ModelNotFoundException, ModelLoadException, InternalException, org.apache.thrift.TException
    {
      applyModel_result result = new applyModel_result();
      receiveBase(result, "applyModel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applierException != null) {
        throw result.applierException;
      }
      if (result.notHere != null) {
        throw result.notHere;
      }
      if (result.mnfException != null) {
        throw result.mnfException;
      }
      if (result.mlException != null) {
        throw result.mlException;
      }
      if (result.iException != null) {
        throw result.iException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "applyModel failed: unknown result");
    }

  }
  public static class AsyncClient extends BaseModelMeshService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void applyModelMulti(java.lang.String modelId, java.util.List<java.nio.ByteBuffer> input, java.util.Map<java.lang.String,java.lang.String> metadata, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.nio.ByteBuffer>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      applyModelMulti_call method_call = new applyModelMulti_call(modelId, input, metadata, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class applyModelMulti_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.nio.ByteBuffer>> {
      private java.lang.String modelId;
      private java.util.List<java.nio.ByteBuffer> input;
      private java.util.Map<java.lang.String,java.lang.String> metadata;
      public applyModelMulti_call(java.lang.String modelId, java.util.List<java.nio.ByteBuffer> input, java.util.Map<java.lang.String,java.lang.String> metadata, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.nio.ByteBuffer>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
        this.input = input;
        this.metadata = metadata;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("applyModelMulti", org.apache.thrift.protocol.TMessageType.CALL, 0));
        applyModelMulti_args args = new applyModelMulti_args();
        args.setModelId(modelId);
        args.setInput(input);
        args.setMetadata(metadata);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.nio.ByteBuffer> getResult() throws ApplierException, ModelNotHereException, ModelNotFoundException, ModelLoadException, InternalException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_applyModelMulti();
      }
    }

    public void applyModel(java.lang.String modelId, java.nio.ByteBuffer input, java.util.Map<java.lang.String,java.lang.String> metadata, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      applyModel_call method_call = new applyModel_call(modelId, input, metadata, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class applyModel_call extends org.apache.thrift.async.TAsyncMethodCall<java.nio.ByteBuffer> {
      private java.lang.String modelId;
      private java.nio.ByteBuffer input;
      private java.util.Map<java.lang.String,java.lang.String> metadata;
      public applyModel_call(java.lang.String modelId, java.nio.ByteBuffer input, java.util.Map<java.lang.String,java.lang.String> metadata, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
        this.input = input;
        this.metadata = metadata;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("applyModel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        applyModel_args args = new applyModel_args();
        args.setModelId(modelId);
        args.setInput(input);
        args.setMetadata(metadata);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.nio.ByteBuffer getResult() throws ApplierException, ModelNotHereException, ModelNotFoundException, ModelLoadException, InternalException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_applyModel();
      }
    }

  }

  public static class Processor<I extends Iface> extends BaseModelMeshService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("applyModelMulti", new applyModelMulti());
      processMap.put("applyModel", new applyModel());
      return processMap;
    }

    public static class applyModelMulti<I extends Iface> extends org.apache.thrift.ProcessFunction<I, applyModelMulti_args> {
      public applyModelMulti() {
        super("applyModelMulti");
      }

      public applyModelMulti_args getEmptyArgsInstance() {
        return new applyModelMulti_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public applyModelMulti_result getResult(I iface, applyModelMulti_args args) throws org.apache.thrift.TException {
        applyModelMulti_result result = new applyModelMulti_result();
        try {
          result.success = iface.applyModelMulti(args.modelId, args.input, args.metadata);
        } catch (ApplierException applierException) {
          result.applierException = applierException;
        } catch (ModelNotHereException notHere) {
          result.notHere = notHere;
        } catch (ModelNotFoundException mnfException) {
          result.mnfException = mnfException;
        } catch (ModelLoadException mlException) {
          result.mlException = mlException;
        } catch (InternalException iException) {
          result.iException = iException;
        }
        return result;
      }
    }

    public static class applyModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, applyModel_args> {
      public applyModel() {
        super("applyModel");
      }

      public applyModel_args getEmptyArgsInstance() {
        return new applyModel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public applyModel_result getResult(I iface, applyModel_args args) throws org.apache.thrift.TException {
        applyModel_result result = new applyModel_result();
        try {
          result.success = iface.applyModel(args.modelId, args.input, args.metadata);
        } catch (ApplierException applierException) {
          result.applierException = applierException;
        } catch (ModelNotHereException notHere) {
          result.notHere = notHere;
        } catch (ModelNotFoundException mnfException) {
          result.mnfException = mnfException;
        } catch (ModelLoadException mlException) {
          result.mlException = mlException;
        } catch (InternalException iException) {
          result.iException = iException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends BaseModelMeshService.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("applyModelMulti", new applyModelMulti());
      processMap.put("applyModel", new applyModel());
      return processMap;
    }

    public static class applyModelMulti<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, applyModelMulti_args, java.util.List<java.nio.ByteBuffer>> {
      public applyModelMulti() {
        super("applyModelMulti");
      }

      public applyModelMulti_args getEmptyArgsInstance() {
        return new applyModelMulti_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.nio.ByteBuffer>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.nio.ByteBuffer>>() { 
          public void onComplete(java.util.List<java.nio.ByteBuffer> o) {
            applyModelMulti_result result = new applyModelMulti_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            applyModelMulti_result result = new applyModelMulti_result();
            if (e instanceof ApplierException) {
              result.applierException = (ApplierException) e;
              result.setApplierExceptionIsSet(true);
              msg = result;
            } else if (e instanceof ModelNotHereException) {
              result.notHere = (ModelNotHereException) e;
              result.setNotHereIsSet(true);
              msg = result;
            } else if (e instanceof ModelNotFoundException) {
              result.mnfException = (ModelNotFoundException) e;
              result.setMnfExceptionIsSet(true);
              msg = result;
            } else if (e instanceof ModelLoadException) {
              result.mlException = (ModelLoadException) e;
              result.setMlExceptionIsSet(true);
              msg = result;
            } else if (e instanceof InternalException) {
              result.iException = (InternalException) e;
              result.setIExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, applyModelMulti_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.nio.ByteBuffer>> resultHandler) throws org.apache.thrift.TException {
        iface.applyModelMulti(args.modelId, args.input, args.metadata,resultHandler);
      }
    }

    public static class applyModel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, applyModel_args, java.nio.ByteBuffer> {
      public applyModel() {
        super("applyModel");
      }

      public applyModel_args getEmptyArgsInstance() {
        return new applyModel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer>() { 
          public void onComplete(java.nio.ByteBuffer o) {
            applyModel_result result = new applyModel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            applyModel_result result = new applyModel_result();
            if (e instanceof ApplierException) {
              result.applierException = (ApplierException) e;
              result.setApplierExceptionIsSet(true);
              msg = result;
            } else if (e instanceof ModelNotHereException) {
              result.notHere = (ModelNotHereException) e;
              result.setNotHereIsSet(true);
              msg = result;
            } else if (e instanceof ModelNotFoundException) {
              result.mnfException = (ModelNotFoundException) e;
              result.setMnfExceptionIsSet(true);
              msg = result;
            } else if (e instanceof ModelLoadException) {
              result.mlException = (ModelLoadException) e;
              result.setMlExceptionIsSet(true);
              msg = result;
            } else if (e instanceof InternalException) {
              result.iException = (InternalException) e;
              result.setIExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, applyModel_args args, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
        iface.applyModel(args.modelId, args.input, args.metadata,resultHandler);
      }
    }

  }

  public static class applyModelMulti_args implements org.apache.thrift.TBase<applyModelMulti_args, applyModelMulti_args._Fields>, java.io.Serializable, Cloneable, Comparable<applyModelMulti_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("applyModelMulti_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("input", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new applyModelMulti_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new applyModelMulti_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String modelId; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> input; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> metadata; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId"),
      INPUT((short)2, "input"),
      METADATA((short)3, "metadata");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          case 2: // INPUT
            return INPUT;
          case 3: // METADATA
            return METADATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT, new org.apache.thrift.meta_data.FieldMetaData("input", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(applyModelMulti_args.class, metaDataMap);
    }

    public applyModelMulti_args() {
    }

    public applyModelMulti_args(
      java.lang.String modelId,
      java.util.List<java.nio.ByteBuffer> input,
      java.util.Map<java.lang.String,java.lang.String> metadata)
    {
      this();
      this.modelId = modelId;
      this.input = input;
      this.metadata = metadata;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public applyModelMulti_args(applyModelMulti_args other) {
      if (other.isSetModelId()) {
        this.modelId = other.modelId;
      }
      if (other.isSetInput()) {
        java.util.List<java.nio.ByteBuffer> __this__input = new java.util.ArrayList<java.nio.ByteBuffer>(other.input);
        this.input = __this__input;
      }
      if (other.isSetMetadata()) {
        java.util.Map<java.lang.String,java.lang.String> __this__metadata = new java.util.HashMap<java.lang.String,java.lang.String>(other.metadata);
        this.metadata = __this__metadata;
      }
    }

    public applyModelMulti_args deepCopy() {
      return new applyModelMulti_args(this);
    }

    @Override
    public void clear() {
      this.modelId = null;
      if (this.input != null) {
        this.input.clear();
      }
      if (this.metadata != null) {
        this.metadata.clear();
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getModelId() {
      return this.modelId;
    }

    public applyModelMulti_args setModelId(@org.apache.thrift.annotation.Nullable java.lang.String modelId) {
      this.modelId = modelId;
      return this;
    }

    public void unsetModelId() {
      this.modelId = null;
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return this.modelId != null;
    }

    public void setModelIdIsSet(boolean value) {
      if (!value) {
        this.modelId = null;
      }
    }

    public int getInputSize() {
      return (this.input == null) ? 0 : this.input.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.nio.ByteBuffer> getInputIterator() {
      return (this.input == null) ? null : this.input.iterator();
    }

    public void addToInput(java.nio.ByteBuffer elem) {
      if (this.input == null) {
        this.input = new java.util.ArrayList<java.nio.ByteBuffer>();
      }
      this.input.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.nio.ByteBuffer> getInput() {
      return this.input;
    }

    public applyModelMulti_args setInput(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> input) {
      this.input = input;
      return this;
    }

    public void unsetInput() {
      this.input = null;
    }

    /** Returns true if field input is set (has been assigned a value) and false otherwise */
    public boolean isSetInput() {
      return this.input != null;
    }

    public void setInputIsSet(boolean value) {
      if (!value) {
        this.input = null;
      }
    }

    public int getMetadataSize() {
      return (this.metadata == null) ? 0 : this.metadata.size();
    }

    public void putToMetadata(java.lang.String key, java.lang.String val) {
      if (this.metadata == null) {
        this.metadata = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.metadata.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getMetadata() {
      return this.metadata;
    }

    public applyModelMulti_args setMetadata(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> metadata) {
      this.metadata = metadata;
      return this;
    }

    public void unsetMetadata() {
      this.metadata = null;
    }

    /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadata() {
      return this.metadata != null;
    }

    public void setMetadataIsSet(boolean value) {
      if (!value) {
        this.metadata = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((java.lang.String)value);
        }
        break;

      case INPUT:
        if (value == null) {
          unsetInput();
        } else {
          setInput((java.util.List<java.nio.ByteBuffer>)value);
        }
        break;

      case METADATA:
        if (value == null) {
          unsetMetadata();
        } else {
          setMetadata((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      case INPUT:
        return getInput();

      case METADATA:
        return getMetadata();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      case INPUT:
        return isSetInput();
      case METADATA:
        return isSetMetadata();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof applyModelMulti_args)
        return this.equals((applyModelMulti_args)that);
      return false;
    }

    public boolean equals(applyModelMulti_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_modelId = true && this.isSetModelId();
      boolean that_present_modelId = true && that.isSetModelId();
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (!this.modelId.equals(that.modelId))
          return false;
      }

      boolean this_present_input = true && this.isSetInput();
      boolean that_present_input = true && that.isSetInput();
      if (this_present_input || that_present_input) {
        if (!(this_present_input && that_present_input))
          return false;
        if (!this.input.equals(that.input))
          return false;
      }

      boolean this_present_metadata = true && this.isSetMetadata();
      boolean that_present_metadata = true && that.isSetMetadata();
      if (this_present_metadata || that_present_metadata) {
        if (!(this_present_metadata && that_present_metadata))
          return false;
        if (!this.metadata.equals(that.metadata))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetModelId()) ? 131071 : 524287);
      if (isSetModelId())
        hashCode = hashCode * 8191 + modelId.hashCode();

      hashCode = hashCode * 8191 + ((isSetInput()) ? 131071 : 524287);
      if (isSetInput())
        hashCode = hashCode * 8191 + input.hashCode();

      hashCode = hashCode * 8191 + ((isSetMetadata()) ? 131071 : 524287);
      if (isSetMetadata())
        hashCode = hashCode * 8191 + metadata.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(applyModelMulti_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetModelId(), other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetInput(), other.isSetInput());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInput()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.input, other.input);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMetadata(), other.isSetMetadata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("applyModelMulti_args(");
      boolean first = true;

      sb.append("modelId:");
      if (this.modelId == null) {
        sb.append("null");
      } else {
        sb.append(this.modelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("input:");
      if (this.input == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.input, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("metadata:");
      if (this.metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.metadata);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class applyModelMulti_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public applyModelMulti_argsStandardScheme getScheme() {
        return new applyModelMulti_argsStandardScheme();
      }
    }

    private static class applyModelMulti_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<applyModelMulti_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, applyModelMulti_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelId = iprot.readString();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  if (struct.input == null) {
                    struct.input = new java.util.ArrayList<java.nio.ByteBuffer>(_list16.size);
                  }
                  @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem17 = null;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readBinary();
                    struct.input.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setInputIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // METADATA
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map19 = iprot.readMapBegin();
                  if (struct.metadata == null) {
                    struct.metadata = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map19.size);
                  }
                  @org.apache.thrift.annotation.Nullable java.lang.String _key20 = null;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val21 = null;
                  for (int _i22 = 0; _i22 < _map19.size; ++_i22)
                  {
                    _key20 = iprot.readString();
                    _val21 = iprot.readString();
                    struct.metadata.put(_key20, _val21);
                  }
                  iprot.readMapEnd();
                }
                struct.setMetadataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, applyModelMulti_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.modelId != null) {
          oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
          oprot.writeString(struct.modelId);
          oprot.writeFieldEnd();
        }
        if (struct.input != null) {
          oprot.writeFieldBegin(INPUT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.input.size()));
            for (java.nio.ByteBuffer _iter23 : struct.input)
            {
              oprot.writeBinary(_iter23);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.metadata != null) {
          oprot.writeFieldBegin(METADATA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.metadata.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter24 : struct.metadata.entrySet())
            {
              oprot.writeString(_iter24.getKey());
              oprot.writeString(_iter24.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class applyModelMulti_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public applyModelMulti_argsTupleScheme getScheme() {
        return new applyModelMulti_argsTupleScheme();
      }
    }

    private static class applyModelMulti_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<applyModelMulti_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, applyModelMulti_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        if (struct.isSetInput()) {
          optionals.set(1);
        }
        if (struct.isSetMetadata()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetModelId()) {
          oprot.writeString(struct.modelId);
        }
        if (struct.isSetInput()) {
          {
            oprot.writeI32(struct.input.size());
            for (java.nio.ByteBuffer _iter25 : struct.input)
            {
              oprot.writeBinary(_iter25);
            }
          }
        }
        if (struct.isSetMetadata()) {
          {
            oprot.writeI32(struct.metadata.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter26 : struct.metadata.entrySet())
            {
              oprot.writeString(_iter26.getKey());
              oprot.writeString(_iter26.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, applyModelMulti_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.modelId = iprot.readString();
          struct.setModelIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list27 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            if (struct.input == null) {
              struct.input = new java.util.ArrayList<java.nio.ByteBuffer>(_list27.size);
            }
            @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem28 = null;
            for (int _i29 = 0; _i29 < _list27.size; ++_i29)
            {
              _elem28 = iprot.readBinary();
              struct.input.add(_elem28);
            }
          }
          struct.setInputIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map30 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
            if (struct.metadata == null) {
              struct.metadata = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map30.size);
            }
            @org.apache.thrift.annotation.Nullable java.lang.String _key31 = null;
            @org.apache.thrift.annotation.Nullable java.lang.String _val32 = null;
            for (int _i33 = 0; _i33 < _map30.size; ++_i33)
            {
              _key31 = iprot.readString();
              _val32 = iprot.readString();
              struct.metadata.put(_key31, _val32);
            }
          }
          struct.setMetadataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class applyModelMulti_result implements org.apache.thrift.TBase<applyModelMulti_result, applyModelMulti_result._Fields>, java.io.Serializable, Cloneable, Comparable<applyModelMulti_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("applyModelMulti_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField APPLIER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applierException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NOT_HERE_FIELD_DESC = new org.apache.thrift.protocol.TField("notHere", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField MNF_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("mnfException", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ML_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("mlException", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField I_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("iException", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new applyModelMulti_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new applyModelMulti_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> success; // required
    public @org.apache.thrift.annotation.Nullable ApplierException applierException; // required
    public @org.apache.thrift.annotation.Nullable ModelNotHereException notHere; // required
    public @org.apache.thrift.annotation.Nullable ModelNotFoundException mnfException; // required
    public @org.apache.thrift.annotation.Nullable ModelLoadException mlException; // required
    public @org.apache.thrift.annotation.Nullable InternalException iException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLIER_EXCEPTION((short)1, "applierException"),
      NOT_HERE((short)2, "notHere"),
      MNF_EXCEPTION((short)3, "mnfException"),
      ML_EXCEPTION((short)4, "mlException"),
      I_EXCEPTION((short)5, "iException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLIER_EXCEPTION
            return APPLIER_EXCEPTION;
          case 2: // NOT_HERE
            return NOT_HERE;
          case 3: // MNF_EXCEPTION
            return MNF_EXCEPTION;
          case 4: // ML_EXCEPTION
            return ML_EXCEPTION;
          case 5: // I_EXCEPTION
            return I_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      tmpMap.put(_Fields.APPLIER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applierException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplierException.class)));
      tmpMap.put(_Fields.NOT_HERE, new org.apache.thrift.meta_data.FieldMetaData("notHere", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelNotHereException.class)));
      tmpMap.put(_Fields.MNF_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("mnfException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelNotFoundException.class)));
      tmpMap.put(_Fields.ML_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("mlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelLoadException.class)));
      tmpMap.put(_Fields.I_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("iException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(applyModelMulti_result.class, metaDataMap);
    }

    public applyModelMulti_result() {
    }

    public applyModelMulti_result(
      java.util.List<java.nio.ByteBuffer> success,
      ApplierException applierException,
      ModelNotHereException notHere,
      ModelNotFoundException mnfException,
      ModelLoadException mlException,
      InternalException iException)
    {
      this();
      this.success = success;
      this.applierException = applierException;
      this.notHere = notHere;
      this.mnfException = mnfException;
      this.mlException = mlException;
      this.iException = iException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public applyModelMulti_result(applyModelMulti_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.nio.ByteBuffer> __this__success = new java.util.ArrayList<java.nio.ByteBuffer>(other.success);
        this.success = __this__success;
      }
      if (other.isSetApplierException()) {
        this.applierException = new ApplierException(other.applierException);
      }
      if (other.isSetNotHere()) {
        this.notHere = new ModelNotHereException(other.notHere);
      }
      if (other.isSetMnfException()) {
        this.mnfException = new ModelNotFoundException(other.mnfException);
      }
      if (other.isSetMlException()) {
        this.mlException = new ModelLoadException(other.mlException);
      }
      if (other.isSetIException()) {
        this.iException = new InternalException(other.iException);
      }
    }

    public applyModelMulti_result deepCopy() {
      return new applyModelMulti_result(this);
    }

    @Override
    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
      this.applierException = null;
      this.notHere = null;
      this.mnfException = null;
      this.mlException = null;
      this.iException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.nio.ByteBuffer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.nio.ByteBuffer elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.nio.ByteBuffer>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.nio.ByteBuffer> getSuccess() {
      return this.success;
    }

    public applyModelMulti_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ApplierException getApplierException() {
      return this.applierException;
    }

    public applyModelMulti_result setApplierException(@org.apache.thrift.annotation.Nullable ApplierException applierException) {
      this.applierException = applierException;
      return this;
    }

    public void unsetApplierException() {
      this.applierException = null;
    }

    /** Returns true if field applierException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplierException() {
      return this.applierException != null;
    }

    public void setApplierExceptionIsSet(boolean value) {
      if (!value) {
        this.applierException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ModelNotHereException getNotHere() {
      return this.notHere;
    }

    public applyModelMulti_result setNotHere(@org.apache.thrift.annotation.Nullable ModelNotHereException notHere) {
      this.notHere = notHere;
      return this;
    }

    public void unsetNotHere() {
      this.notHere = null;
    }

    /** Returns true if field notHere is set (has been assigned a value) and false otherwise */
    public boolean isSetNotHere() {
      return this.notHere != null;
    }

    public void setNotHereIsSet(boolean value) {
      if (!value) {
        this.notHere = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ModelNotFoundException getMnfException() {
      return this.mnfException;
    }

    public applyModelMulti_result setMnfException(@org.apache.thrift.annotation.Nullable ModelNotFoundException mnfException) {
      this.mnfException = mnfException;
      return this;
    }

    public void unsetMnfException() {
      this.mnfException = null;
    }

    /** Returns true if field mnfException is set (has been assigned a value) and false otherwise */
    public boolean isSetMnfException() {
      return this.mnfException != null;
    }

    public void setMnfExceptionIsSet(boolean value) {
      if (!value) {
        this.mnfException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ModelLoadException getMlException() {
      return this.mlException;
    }

    public applyModelMulti_result setMlException(@org.apache.thrift.annotation.Nullable ModelLoadException mlException) {
      this.mlException = mlException;
      return this;
    }

    public void unsetMlException() {
      this.mlException = null;
    }

    /** Returns true if field mlException is set (has been assigned a value) and false otherwise */
    public boolean isSetMlException() {
      return this.mlException != null;
    }

    public void setMlExceptionIsSet(boolean value) {
      if (!value) {
        this.mlException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public InternalException getIException() {
      return this.iException;
    }

    public applyModelMulti_result setIException(@org.apache.thrift.annotation.Nullable InternalException iException) {
      this.iException = iException;
      return this;
    }

    public void unsetIException() {
      this.iException = null;
    }

    /** Returns true if field iException is set (has been assigned a value) and false otherwise */
    public boolean isSetIException() {
      return this.iException != null;
    }

    public void setIExceptionIsSet(boolean value) {
      if (!value) {
        this.iException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.nio.ByteBuffer>)value);
        }
        break;

      case APPLIER_EXCEPTION:
        if (value == null) {
          unsetApplierException();
        } else {
          setApplierException((ApplierException)value);
        }
        break;

      case NOT_HERE:
        if (value == null) {
          unsetNotHere();
        } else {
          setNotHere((ModelNotHereException)value);
        }
        break;

      case MNF_EXCEPTION:
        if (value == null) {
          unsetMnfException();
        } else {
          setMnfException((ModelNotFoundException)value);
        }
        break;

      case ML_EXCEPTION:
        if (value == null) {
          unsetMlException();
        } else {
          setMlException((ModelLoadException)value);
        }
        break;

      case I_EXCEPTION:
        if (value == null) {
          unsetIException();
        } else {
          setIException((InternalException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLIER_EXCEPTION:
        return getApplierException();

      case NOT_HERE:
        return getNotHere();

      case MNF_EXCEPTION:
        return getMnfException();

      case ML_EXCEPTION:
        return getMlException();

      case I_EXCEPTION:
        return getIException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLIER_EXCEPTION:
        return isSetApplierException();
      case NOT_HERE:
        return isSetNotHere();
      case MNF_EXCEPTION:
        return isSetMnfException();
      case ML_EXCEPTION:
        return isSetMlException();
      case I_EXCEPTION:
        return isSetIException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof applyModelMulti_result)
        return this.equals((applyModelMulti_result)that);
      return false;
    }

    public boolean equals(applyModelMulti_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applierException = true && this.isSetApplierException();
      boolean that_present_applierException = true && that.isSetApplierException();
      if (this_present_applierException || that_present_applierException) {
        if (!(this_present_applierException && that_present_applierException))
          return false;
        if (!this.applierException.equals(that.applierException))
          return false;
      }

      boolean this_present_notHere = true && this.isSetNotHere();
      boolean that_present_notHere = true && that.isSetNotHere();
      if (this_present_notHere || that_present_notHere) {
        if (!(this_present_notHere && that_present_notHere))
          return false;
        if (!this.notHere.equals(that.notHere))
          return false;
      }

      boolean this_present_mnfException = true && this.isSetMnfException();
      boolean that_present_mnfException = true && that.isSetMnfException();
      if (this_present_mnfException || that_present_mnfException) {
        if (!(this_present_mnfException && that_present_mnfException))
          return false;
        if (!this.mnfException.equals(that.mnfException))
          return false;
      }

      boolean this_present_mlException = true && this.isSetMlException();
      boolean that_present_mlException = true && that.isSetMlException();
      if (this_present_mlException || that_present_mlException) {
        if (!(this_present_mlException && that_present_mlException))
          return false;
        if (!this.mlException.equals(that.mlException))
          return false;
      }

      boolean this_present_iException = true && this.isSetIException();
      boolean that_present_iException = true && that.isSetIException();
      if (this_present_iException || that_present_iException) {
        if (!(this_present_iException && that_present_iException))
          return false;
        if (!this.iException.equals(that.iException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetApplierException()) ? 131071 : 524287);
      if (isSetApplierException())
        hashCode = hashCode * 8191 + applierException.hashCode();

      hashCode = hashCode * 8191 + ((isSetNotHere()) ? 131071 : 524287);
      if (isSetNotHere())
        hashCode = hashCode * 8191 + notHere.hashCode();

      hashCode = hashCode * 8191 + ((isSetMnfException()) ? 131071 : 524287);
      if (isSetMnfException())
        hashCode = hashCode * 8191 + mnfException.hashCode();

      hashCode = hashCode * 8191 + ((isSetMlException()) ? 131071 : 524287);
      if (isSetMlException())
        hashCode = hashCode * 8191 + mlException.hashCode();

      hashCode = hashCode * 8191 + ((isSetIException()) ? 131071 : 524287);
      if (isSetIException())
        hashCode = hashCode * 8191 + iException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(applyModelMulti_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetApplierException(), other.isSetApplierException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplierException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applierException, other.applierException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetNotHere(), other.isSetNotHere());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotHere()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notHere, other.notHere);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMnfException(), other.isSetMnfException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMnfException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mnfException, other.mnfException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMlException(), other.isSetMlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mlException, other.mlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIException(), other.isSetIException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iException, other.iException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("applyModelMulti_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applierException:");
      if (this.applierException == null) {
        sb.append("null");
      } else {
        sb.append(this.applierException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notHere:");
      if (this.notHere == null) {
        sb.append("null");
      } else {
        sb.append(this.notHere);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mnfException:");
      if (this.mnfException == null) {
        sb.append("null");
      } else {
        sb.append(this.mnfException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mlException:");
      if (this.mlException == null) {
        sb.append("null");
      } else {
        sb.append(this.mlException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iException:");
      if (this.iException == null) {
        sb.append("null");
      } else {
        sb.append(this.iException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class applyModelMulti_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public applyModelMulti_resultStandardScheme getScheme() {
        return new applyModelMulti_resultStandardScheme();
      }
    }

    private static class applyModelMulti_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<applyModelMulti_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, applyModelMulti_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                  if (struct.success == null) {
                    struct.success = new java.util.ArrayList<java.nio.ByteBuffer>(_list34.size);
                  }
                  @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem35 = null;
                  for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                  {
                    _elem35 = iprot.readBinary();
                    struct.success.add(_elem35);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLIER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.applierException == null) {
                  struct.applierException = new ApplierException();
                }
                struct.applierException.read(iprot);
                struct.setApplierExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOT_HERE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.notHere == null) {
                  struct.notHere = new ModelNotHereException();
                }
                struct.notHere.read(iprot);
                struct.setNotHereIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MNF_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.mnfException == null) {
                  struct.mnfException = new ModelNotFoundException();
                }
                struct.mnfException.read(iprot);
                struct.setMnfExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ML_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.mlException == null) {
                  struct.mlException = new ModelLoadException();
                }
                struct.mlException.read(iprot);
                struct.setMlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // I_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.iException == null) {
                  struct.iException = new InternalException();
                }
                struct.iException.read(iprot);
                struct.setIExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, applyModelMulti_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.nio.ByteBuffer _iter37 : struct.success)
            {
              oprot.writeBinary(_iter37);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.applierException != null) {
          oprot.writeFieldBegin(APPLIER_EXCEPTION_FIELD_DESC);
          struct.applierException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notHere != null) {
          oprot.writeFieldBegin(NOT_HERE_FIELD_DESC);
          struct.notHere.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.mnfException != null) {
          oprot.writeFieldBegin(MNF_EXCEPTION_FIELD_DESC);
          struct.mnfException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.mlException != null) {
          oprot.writeFieldBegin(ML_EXCEPTION_FIELD_DESC);
          struct.mlException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.iException != null) {
          oprot.writeFieldBegin(I_EXCEPTION_FIELD_DESC);
          struct.iException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class applyModelMulti_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public applyModelMulti_resultTupleScheme getScheme() {
        return new applyModelMulti_resultTupleScheme();
      }
    }

    private static class applyModelMulti_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<applyModelMulti_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, applyModelMulti_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplierException()) {
          optionals.set(1);
        }
        if (struct.isSetNotHere()) {
          optionals.set(2);
        }
        if (struct.isSetMnfException()) {
          optionals.set(3);
        }
        if (struct.isSetMlException()) {
          optionals.set(4);
        }
        if (struct.isSetIException()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.nio.ByteBuffer _iter38 : struct.success)
            {
              oprot.writeBinary(_iter38);
            }
          }
        }
        if (struct.isSetApplierException()) {
          struct.applierException.write(oprot);
        }
        if (struct.isSetNotHere()) {
          struct.notHere.write(oprot);
        }
        if (struct.isSetMnfException()) {
          struct.mnfException.write(oprot);
        }
        if (struct.isSetMlException()) {
          struct.mlException.write(oprot);
        }
        if (struct.isSetIException()) {
          struct.iException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, applyModelMulti_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list39 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            if (struct.success == null) {
              struct.success = new java.util.ArrayList<java.nio.ByteBuffer>(_list39.size);
            }
            @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem40 = null;
            for (int _i41 = 0; _i41 < _list39.size; ++_i41)
            {
              _elem40 = iprot.readBinary();
              struct.success.add(_elem40);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          if (struct.applierException == null) {
            struct.applierException = new ApplierException();
          }
          struct.applierException.read(iprot);
          struct.setApplierExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          if (struct.notHere == null) {
            struct.notHere = new ModelNotHereException();
          }
          struct.notHere.read(iprot);
          struct.setNotHereIsSet(true);
        }
        if (incoming.get(3)) {
          if (struct.mnfException == null) {
            struct.mnfException = new ModelNotFoundException();
          }
          struct.mnfException.read(iprot);
          struct.setMnfExceptionIsSet(true);
        }
        if (incoming.get(4)) {
          if (struct.mlException == null) {
            struct.mlException = new ModelLoadException();
          }
          struct.mlException.read(iprot);
          struct.setMlExceptionIsSet(true);
        }
        if (incoming.get(5)) {
          if (struct.iException == null) {
            struct.iException = new InternalException();
          }
          struct.iException.read(iprot);
          struct.setIExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class applyModel_args implements org.apache.thrift.TBase<applyModel_args, applyModel_args._Fields>, java.io.Serializable, Cloneable, Comparable<applyModel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("applyModel_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("input", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new applyModel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new applyModel_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String modelId; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer input; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> metadata; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId"),
      INPUT((short)2, "input"),
      METADATA((short)3, "metadata");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          case 2: // INPUT
            return INPUT;
          case 3: // METADATA
            return METADATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT, new org.apache.thrift.meta_data.FieldMetaData("input", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(applyModel_args.class, metaDataMap);
    }

    public applyModel_args() {
    }

    public applyModel_args(
      java.lang.String modelId,
      java.nio.ByteBuffer input,
      java.util.Map<java.lang.String,java.lang.String> metadata)
    {
      this();
      this.modelId = modelId;
      this.input = input;
      this.metadata = metadata;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public applyModel_args(applyModel_args other) {
      if (other.isSetModelId()) {
        this.modelId = other.modelId;
      }
      if (other.isSetInput()) {
        this.input = org.apache.thrift.TBaseHelper.copyBinary(other.input);
      }
      if (other.isSetMetadata()) {
        java.util.Map<java.lang.String,java.lang.String> __this__metadata = new java.util.HashMap<java.lang.String,java.lang.String>(other.metadata);
        this.metadata = __this__metadata;
      }
    }

    public applyModel_args deepCopy() {
      return new applyModel_args(this);
    }

    @Override
    public void clear() {
      this.modelId = null;
      this.input = null;
      if (this.metadata != null) {
        this.metadata.clear();
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getModelId() {
      return this.modelId;
    }

    public applyModel_args setModelId(@org.apache.thrift.annotation.Nullable java.lang.String modelId) {
      this.modelId = modelId;
      return this;
    }

    public void unsetModelId() {
      this.modelId = null;
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return this.modelId != null;
    }

    public void setModelIdIsSet(boolean value) {
      if (!value) {
        this.modelId = null;
      }
    }

    public byte[] getInput() {
      setInput(org.apache.thrift.TBaseHelper.rightSize(input));
      return input == null ? null : input.array();
    }

    public java.nio.ByteBuffer bufferForInput() {
      return input;
    }

    public applyModel_args setInput(byte[] input) {
      this.input = input == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(input);
      return this;
    }

    public applyModel_args setInput(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer input) {
      this.input = input;
      return this;
    }

    public void unsetInput() {
      this.input = null;
    }

    /** Returns true if field input is set (has been assigned a value) and false otherwise */
    public boolean isSetInput() {
      return this.input != null;
    }

    public void setInputIsSet(boolean value) {
      if (!value) {
        this.input = null;
      }
    }

    public int getMetadataSize() {
      return (this.metadata == null) ? 0 : this.metadata.size();
    }

    public void putToMetadata(java.lang.String key, java.lang.String val) {
      if (this.metadata == null) {
        this.metadata = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.metadata.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getMetadata() {
      return this.metadata;
    }

    public applyModel_args setMetadata(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> metadata) {
      this.metadata = metadata;
      return this;
    }

    public void unsetMetadata() {
      this.metadata = null;
    }

    /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadata() {
      return this.metadata != null;
    }

    public void setMetadataIsSet(boolean value) {
      if (!value) {
        this.metadata = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((java.lang.String)value);
        }
        break;

      case INPUT:
        if (value == null) {
          unsetInput();
        } else {
          if (value instanceof byte[]) {
            setInput((byte[])value);
          } else {
            setInput((java.nio.ByteBuffer)value);
          }
        }
        break;

      case METADATA:
        if (value == null) {
          unsetMetadata();
        } else {
          setMetadata((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      case INPUT:
        return getInput();

      case METADATA:
        return getMetadata();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      case INPUT:
        return isSetInput();
      case METADATA:
        return isSetMetadata();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof applyModel_args)
        return this.equals((applyModel_args)that);
      return false;
    }

    public boolean equals(applyModel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_modelId = true && this.isSetModelId();
      boolean that_present_modelId = true && that.isSetModelId();
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (!this.modelId.equals(that.modelId))
          return false;
      }

      boolean this_present_input = true && this.isSetInput();
      boolean that_present_input = true && that.isSetInput();
      if (this_present_input || that_present_input) {
        if (!(this_present_input && that_present_input))
          return false;
        if (!this.input.equals(that.input))
          return false;
      }

      boolean this_present_metadata = true && this.isSetMetadata();
      boolean that_present_metadata = true && that.isSetMetadata();
      if (this_present_metadata || that_present_metadata) {
        if (!(this_present_metadata && that_present_metadata))
          return false;
        if (!this.metadata.equals(that.metadata))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetModelId()) ? 131071 : 524287);
      if (isSetModelId())
        hashCode = hashCode * 8191 + modelId.hashCode();

      hashCode = hashCode * 8191 + ((isSetInput()) ? 131071 : 524287);
      if (isSetInput())
        hashCode = hashCode * 8191 + input.hashCode();

      hashCode = hashCode * 8191 + ((isSetMetadata()) ? 131071 : 524287);
      if (isSetMetadata())
        hashCode = hashCode * 8191 + metadata.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(applyModel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetModelId(), other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetInput(), other.isSetInput());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInput()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.input, other.input);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMetadata(), other.isSetMetadata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("applyModel_args(");
      boolean first = true;

      sb.append("modelId:");
      if (this.modelId == null) {
        sb.append("null");
      } else {
        sb.append(this.modelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("input:");
      if (this.input == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.input, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("metadata:");
      if (this.metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.metadata);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class applyModel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public applyModel_argsStandardScheme getScheme() {
        return new applyModel_argsStandardScheme();
      }
    }

    private static class applyModel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<applyModel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, applyModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelId = iprot.readString();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.input = iprot.readBinary();
                struct.setInputIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // METADATA
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map42 = iprot.readMapBegin();
                  if (struct.metadata == null) {
                    struct.metadata = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map42.size);
                  }
                  @org.apache.thrift.annotation.Nullable java.lang.String _key43 = null;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val44 = null;
                  for (int _i45 = 0; _i45 < _map42.size; ++_i45)
                  {
                    _key43 = iprot.readString();
                    _val44 = iprot.readString();
                    struct.metadata.put(_key43, _val44);
                  }
                  iprot.readMapEnd();
                }
                struct.setMetadataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, applyModel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.modelId != null) {
          oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
          oprot.writeString(struct.modelId);
          oprot.writeFieldEnd();
        }
        if (struct.input != null) {
          oprot.writeFieldBegin(INPUT_FIELD_DESC);
          oprot.writeBinary(struct.input);
          oprot.writeFieldEnd();
        }
        if (struct.metadata != null) {
          oprot.writeFieldBegin(METADATA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.metadata.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter46 : struct.metadata.entrySet())
            {
              oprot.writeString(_iter46.getKey());
              oprot.writeString(_iter46.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class applyModel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public applyModel_argsTupleScheme getScheme() {
        return new applyModel_argsTupleScheme();
      }
    }

    private static class applyModel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<applyModel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, applyModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        if (struct.isSetInput()) {
          optionals.set(1);
        }
        if (struct.isSetMetadata()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetModelId()) {
          oprot.writeString(struct.modelId);
        }
        if (struct.isSetInput()) {
          oprot.writeBinary(struct.input);
        }
        if (struct.isSetMetadata()) {
          {
            oprot.writeI32(struct.metadata.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter47 : struct.metadata.entrySet())
            {
              oprot.writeString(_iter47.getKey());
              oprot.writeString(_iter47.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, applyModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.modelId = iprot.readString();
          struct.setModelIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.input = iprot.readBinary();
          struct.setInputIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
            if (struct.metadata == null) {
              struct.metadata = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map48.size);
            }
            @org.apache.thrift.annotation.Nullable java.lang.String _key49 = null;
            @org.apache.thrift.annotation.Nullable java.lang.String _val50 = null;
            for (int _i51 = 0; _i51 < _map48.size; ++_i51)
            {
              _key49 = iprot.readString();
              _val50 = iprot.readString();
              struct.metadata.put(_key49, _val50);
            }
          }
          struct.setMetadataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class applyModel_result implements org.apache.thrift.TBase<applyModel_result, applyModel_result._Fields>, java.io.Serializable, Cloneable, Comparable<applyModel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("applyModel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField APPLIER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applierException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NOT_HERE_FIELD_DESC = new org.apache.thrift.protocol.TField("notHere", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField MNF_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("mnfException", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ML_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("mlException", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField I_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("iException", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new applyModel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new applyModel_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success; // required
    public @org.apache.thrift.annotation.Nullable ApplierException applierException; // required
    public @org.apache.thrift.annotation.Nullable ModelNotHereException notHere; // required
    public @org.apache.thrift.annotation.Nullable ModelNotFoundException mnfException; // required
    public @org.apache.thrift.annotation.Nullable ModelLoadException mlException; // required
    public @org.apache.thrift.annotation.Nullable InternalException iException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLIER_EXCEPTION((short)1, "applierException"),
      NOT_HERE((short)2, "notHere"),
      MNF_EXCEPTION((short)3, "mnfException"),
      ML_EXCEPTION((short)4, "mlException"),
      I_EXCEPTION((short)5, "iException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLIER_EXCEPTION
            return APPLIER_EXCEPTION;
          case 2: // NOT_HERE
            return NOT_HERE;
          case 3: // MNF_EXCEPTION
            return MNF_EXCEPTION;
          case 4: // ML_EXCEPTION
            return ML_EXCEPTION;
          case 5: // I_EXCEPTION
            return I_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.APPLIER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applierException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplierException.class)));
      tmpMap.put(_Fields.NOT_HERE, new org.apache.thrift.meta_data.FieldMetaData("notHere", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelNotHereException.class)));
      tmpMap.put(_Fields.MNF_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("mnfException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelNotFoundException.class)));
      tmpMap.put(_Fields.ML_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("mlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelLoadException.class)));
      tmpMap.put(_Fields.I_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("iException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(applyModel_result.class, metaDataMap);
    }

    public applyModel_result() {
    }

    public applyModel_result(
      java.nio.ByteBuffer success,
      ApplierException applierException,
      ModelNotHereException notHere,
      ModelNotFoundException mnfException,
      ModelLoadException mlException,
      InternalException iException)
    {
      this();
      this.success = success;
      this.applierException = applierException;
      this.notHere = notHere;
      this.mnfException = mnfException;
      this.mlException = mlException;
      this.iException = iException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public applyModel_result(applyModel_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
      if (other.isSetApplierException()) {
        this.applierException = new ApplierException(other.applierException);
      }
      if (other.isSetNotHere()) {
        this.notHere = new ModelNotHereException(other.notHere);
      }
      if (other.isSetMnfException()) {
        this.mnfException = new ModelNotFoundException(other.mnfException);
      }
      if (other.isSetMlException()) {
        this.mlException = new ModelLoadException(other.mlException);
      }
      if (other.isSetIException()) {
        this.iException = new InternalException(other.iException);
      }
    }

    public applyModel_result deepCopy() {
      return new applyModel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applierException = null;
      this.notHere = null;
      this.mnfException = null;
      this.mlException = null;
      this.iException = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public java.nio.ByteBuffer bufferForSuccess() {
      return success;
    }

    public applyModel_result setSuccess(byte[] success) {
      this.success = success == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(success);
      return this;
    }

    public applyModel_result setSuccess(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ApplierException getApplierException() {
      return this.applierException;
    }

    public applyModel_result setApplierException(@org.apache.thrift.annotation.Nullable ApplierException applierException) {
      this.applierException = applierException;
      return this;
    }

    public void unsetApplierException() {
      this.applierException = null;
    }

    /** Returns true if field applierException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplierException() {
      return this.applierException != null;
    }

    public void setApplierExceptionIsSet(boolean value) {
      if (!value) {
        this.applierException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ModelNotHereException getNotHere() {
      return this.notHere;
    }

    public applyModel_result setNotHere(@org.apache.thrift.annotation.Nullable ModelNotHereException notHere) {
      this.notHere = notHere;
      return this;
    }

    public void unsetNotHere() {
      this.notHere = null;
    }

    /** Returns true if field notHere is set (has been assigned a value) and false otherwise */
    public boolean isSetNotHere() {
      return this.notHere != null;
    }

    public void setNotHereIsSet(boolean value) {
      if (!value) {
        this.notHere = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ModelNotFoundException getMnfException() {
      return this.mnfException;
    }

    public applyModel_result setMnfException(@org.apache.thrift.annotation.Nullable ModelNotFoundException mnfException) {
      this.mnfException = mnfException;
      return this;
    }

    public void unsetMnfException() {
      this.mnfException = null;
    }

    /** Returns true if field mnfException is set (has been assigned a value) and false otherwise */
    public boolean isSetMnfException() {
      return this.mnfException != null;
    }

    public void setMnfExceptionIsSet(boolean value) {
      if (!value) {
        this.mnfException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ModelLoadException getMlException() {
      return this.mlException;
    }

    public applyModel_result setMlException(@org.apache.thrift.annotation.Nullable ModelLoadException mlException) {
      this.mlException = mlException;
      return this;
    }

    public void unsetMlException() {
      this.mlException = null;
    }

    /** Returns true if field mlException is set (has been assigned a value) and false otherwise */
    public boolean isSetMlException() {
      return this.mlException != null;
    }

    public void setMlExceptionIsSet(boolean value) {
      if (!value) {
        this.mlException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public InternalException getIException() {
      return this.iException;
    }

    public applyModel_result setIException(@org.apache.thrift.annotation.Nullable InternalException iException) {
      this.iException = iException;
      return this;
    }

    public void unsetIException() {
      this.iException = null;
    }

    /** Returns true if field iException is set (has been assigned a value) and false otherwise */
    public boolean isSetIException() {
      return this.iException != null;
    }

    public void setIExceptionIsSet(boolean value) {
      if (!value) {
        this.iException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          if (value instanceof byte[]) {
            setSuccess((byte[])value);
          } else {
            setSuccess((java.nio.ByteBuffer)value);
          }
        }
        break;

      case APPLIER_EXCEPTION:
        if (value == null) {
          unsetApplierException();
        } else {
          setApplierException((ApplierException)value);
        }
        break;

      case NOT_HERE:
        if (value == null) {
          unsetNotHere();
        } else {
          setNotHere((ModelNotHereException)value);
        }
        break;

      case MNF_EXCEPTION:
        if (value == null) {
          unsetMnfException();
        } else {
          setMnfException((ModelNotFoundException)value);
        }
        break;

      case ML_EXCEPTION:
        if (value == null) {
          unsetMlException();
        } else {
          setMlException((ModelLoadException)value);
        }
        break;

      case I_EXCEPTION:
        if (value == null) {
          unsetIException();
        } else {
          setIException((InternalException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLIER_EXCEPTION:
        return getApplierException();

      case NOT_HERE:
        return getNotHere();

      case MNF_EXCEPTION:
        return getMnfException();

      case ML_EXCEPTION:
        return getMlException();

      case I_EXCEPTION:
        return getIException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLIER_EXCEPTION:
        return isSetApplierException();
      case NOT_HERE:
        return isSetNotHere();
      case MNF_EXCEPTION:
        return isSetMnfException();
      case ML_EXCEPTION:
        return isSetMlException();
      case I_EXCEPTION:
        return isSetIException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof applyModel_result)
        return this.equals((applyModel_result)that);
      return false;
    }

    public boolean equals(applyModel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applierException = true && this.isSetApplierException();
      boolean that_present_applierException = true && that.isSetApplierException();
      if (this_present_applierException || that_present_applierException) {
        if (!(this_present_applierException && that_present_applierException))
          return false;
        if (!this.applierException.equals(that.applierException))
          return false;
      }

      boolean this_present_notHere = true && this.isSetNotHere();
      boolean that_present_notHere = true && that.isSetNotHere();
      if (this_present_notHere || that_present_notHere) {
        if (!(this_present_notHere && that_present_notHere))
          return false;
        if (!this.notHere.equals(that.notHere))
          return false;
      }

      boolean this_present_mnfException = true && this.isSetMnfException();
      boolean that_present_mnfException = true && that.isSetMnfException();
      if (this_present_mnfException || that_present_mnfException) {
        if (!(this_present_mnfException && that_present_mnfException))
          return false;
        if (!this.mnfException.equals(that.mnfException))
          return false;
      }

      boolean this_present_mlException = true && this.isSetMlException();
      boolean that_present_mlException = true && that.isSetMlException();
      if (this_present_mlException || that_present_mlException) {
        if (!(this_present_mlException && that_present_mlException))
          return false;
        if (!this.mlException.equals(that.mlException))
          return false;
      }

      boolean this_present_iException = true && this.isSetIException();
      boolean that_present_iException = true && that.isSetIException();
      if (this_present_iException || that_present_iException) {
        if (!(this_present_iException && that_present_iException))
          return false;
        if (!this.iException.equals(that.iException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetApplierException()) ? 131071 : 524287);
      if (isSetApplierException())
        hashCode = hashCode * 8191 + applierException.hashCode();

      hashCode = hashCode * 8191 + ((isSetNotHere()) ? 131071 : 524287);
      if (isSetNotHere())
        hashCode = hashCode * 8191 + notHere.hashCode();

      hashCode = hashCode * 8191 + ((isSetMnfException()) ? 131071 : 524287);
      if (isSetMnfException())
        hashCode = hashCode * 8191 + mnfException.hashCode();

      hashCode = hashCode * 8191 + ((isSetMlException()) ? 131071 : 524287);
      if (isSetMlException())
        hashCode = hashCode * 8191 + mlException.hashCode();

      hashCode = hashCode * 8191 + ((isSetIException()) ? 131071 : 524287);
      if (isSetIException())
        hashCode = hashCode * 8191 + iException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(applyModel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetApplierException(), other.isSetApplierException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplierException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applierException, other.applierException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetNotHere(), other.isSetNotHere());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotHere()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notHere, other.notHere);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMnfException(), other.isSetMnfException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMnfException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mnfException, other.mnfException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMlException(), other.isSetMlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mlException, other.mlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIException(), other.isSetIException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iException, other.iException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("applyModel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applierException:");
      if (this.applierException == null) {
        sb.append("null");
      } else {
        sb.append(this.applierException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notHere:");
      if (this.notHere == null) {
        sb.append("null");
      } else {
        sb.append(this.notHere);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mnfException:");
      if (this.mnfException == null) {
        sb.append("null");
      } else {
        sb.append(this.mnfException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mlException:");
      if (this.mlException == null) {
        sb.append("null");
      } else {
        sb.append(this.mlException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iException:");
      if (this.iException == null) {
        sb.append("null");
      } else {
        sb.append(this.iException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class applyModel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public applyModel_resultStandardScheme getScheme() {
        return new applyModel_resultStandardScheme();
      }
    }

    private static class applyModel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<applyModel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, applyModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLIER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.applierException == null) {
                  struct.applierException = new ApplierException();
                }
                struct.applierException.read(iprot);
                struct.setApplierExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOT_HERE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.notHere == null) {
                  struct.notHere = new ModelNotHereException();
                }
                struct.notHere.read(iprot);
                struct.setNotHereIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MNF_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.mnfException == null) {
                  struct.mnfException = new ModelNotFoundException();
                }
                struct.mnfException.read(iprot);
                struct.setMnfExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ML_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.mlException == null) {
                  struct.mlException = new ModelLoadException();
                }
                struct.mlException.read(iprot);
                struct.setMlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // I_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.iException == null) {
                  struct.iException = new InternalException();
                }
                struct.iException.read(iprot);
                struct.setIExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, applyModel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.applierException != null) {
          oprot.writeFieldBegin(APPLIER_EXCEPTION_FIELD_DESC);
          struct.applierException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notHere != null) {
          oprot.writeFieldBegin(NOT_HERE_FIELD_DESC);
          struct.notHere.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.mnfException != null) {
          oprot.writeFieldBegin(MNF_EXCEPTION_FIELD_DESC);
          struct.mnfException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.mlException != null) {
          oprot.writeFieldBegin(ML_EXCEPTION_FIELD_DESC);
          struct.mlException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.iException != null) {
          oprot.writeFieldBegin(I_EXCEPTION_FIELD_DESC);
          struct.iException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class applyModel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public applyModel_resultTupleScheme getScheme() {
        return new applyModel_resultTupleScheme();
      }
    }

    private static class applyModel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<applyModel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, applyModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplierException()) {
          optionals.set(1);
        }
        if (struct.isSetNotHere()) {
          optionals.set(2);
        }
        if (struct.isSetMnfException()) {
          optionals.set(3);
        }
        if (struct.isSetMlException()) {
          optionals.set(4);
        }
        if (struct.isSetIException()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
        if (struct.isSetApplierException()) {
          struct.applierException.write(oprot);
        }
        if (struct.isSetNotHere()) {
          struct.notHere.write(oprot);
        }
        if (struct.isSetMnfException()) {
          struct.mnfException.write(oprot);
        }
        if (struct.isSetMlException()) {
          struct.mlException.write(oprot);
        }
        if (struct.isSetIException()) {
          struct.iException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, applyModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          if (struct.applierException == null) {
            struct.applierException = new ApplierException();
          }
          struct.applierException.read(iprot);
          struct.setApplierExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          if (struct.notHere == null) {
            struct.notHere = new ModelNotHereException();
          }
          struct.notHere.read(iprot);
          struct.setNotHereIsSet(true);
        }
        if (incoming.get(3)) {
          if (struct.mnfException == null) {
            struct.mnfException = new ModelNotFoundException();
          }
          struct.mnfException.read(iprot);
          struct.setMnfExceptionIsSet(true);
        }
        if (incoming.get(4)) {
          if (struct.mlException == null) {
            struct.mlException = new ModelLoadException();
          }
          struct.mlException.read(iprot);
          struct.setMlExceptionIsSet(true);
        }
        if (incoming.get(5)) {
          if (struct.iException == null) {
            struct.iException = new InternalException();
          }
          struct.iException.read(iprot);
          struct.setIExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
